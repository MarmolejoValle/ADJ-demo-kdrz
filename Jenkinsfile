pipeline {
    agent any

    // üîß Configuraci√≥n gen√©rica para macOS
    environment {
        // Asegura que Jenkins encuentre docker y docker compose instalados con Homebrew
        PATH = "/opt/homebrew/bin:${env.PATH}"
        COMPOSE_PROJECT_NAME = "adj-demo"
    }

    stages {
        stage('Parando los servicios') {
            steps {
                script {
                    echo "üõë Deteniendo servicios anteriores..."
                    sh '''
                        set +e
                        docker compose -p $COMPOSE_PROJECT_NAME down || true
                        set -e
                    '''
                }
            }
        }

        stage('Eliminando im√°genes anteriores') {
            steps {
                script {
                    echo "üßπ Eliminando im√°genes antiguas..."
                    sh '''
                        set +e
                        IMAGES=$(docker images --filter "label=com.docker.compose.project=$COMPOSE_PROJECT_NAME" -q)
                        if [ -n "$IMAGES" ]; then
                            echo "Eliminando im√°genes del proyecto $COMPOSE_PROJECT_NAME..."
                            docker rmi -f $IMAGES || true
                        else
                            echo "No hay im√°genes para eliminar."
                        fi
                        set -e
                    '''
                }
            }
        }

        stage('Clonando el repositorio') {
            steps {
                echo "üì• Descargando el c√≥digo fuente desde SCM..."
                checkout scm
            }
        }

        stage('Construyendo y levantando los servicios') {
            steps {
                script {
                    echo "üöÄ Construyendo y levantando contenedores..."
                    sh '''
                        docker compose -p $COMPOSE_PROJECT_NAME up --build -d
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ El pipeline se ejecut√≥ correctamente.'
        }
        failure {
            echo '‚ùå El pipeline fall√≥.'
        }
        always {
            echo 'üîÑ El pipeline ha finalizado.'
        }
    }
}
